(* author: Oliver Gratton *)
(* date: 27/11/2015 *)
(* This file contains a proof for associativity of add. *)

Signatures:
    add   : nat -> nat -> nat;

Definitions:
    [add 0] : forall n : nat . add zero n = n : nat;
    [add m] : forall m : nat . forall n : nat . add (suc m) n = suc(add m n) : nat;

Theorem [add assoc]:
    Statement: forall m : nat . forall n : nat . forall o : nat . 
			   add m (add n o) = add (add m n) o : nat
    Proof:
		by induction on nat :
		
		case zero :
			assume n : nat .
			assume o : nat .
			
			(* LHS *)
			we know [step L1] : add zero (add n o) = add n o           : nat
				because [add 0] with (add n o).
				
			(* RHS *)
			we know [def 1] : add zero n = n                           : nat
				because [add 0] with (n).
				
			we know [step R1] : add (add zero n) o = add n o           : nat
				because equality on ([def 1]).
				
			(* LHS = RHS *)
			we know [step 1] : add zero (add n o) = add (add zero n) o : nat
				because equality on ([step L1];[step R1]).
				
		by [step 1]
		
		case (suc m): [IH] : forall n : nat . forall o : nat .
					   add m (add n o) = add (add m n) o : nat .
			assume n: nat .
			assume o: nat .
			
			(* LHS *)
			we know [step L1] : add (suc m) (add n o) = suc (add m (add n o)) : nat
				because [add m] with (m;add n o).
				
			(* RHS *)
			we know [def 1] : add (suc m) n = suc (add m n)                   : nat
				because [add m] with (m;n).
				
			we know [step R1] : add (add (suc m) n) o = add (suc (add m n)) o : nat
				because equality on ([def 1]).
				
			we know [step R2] : add (suc (add m n)) o = suc (add (add m n) o) : nat
				because [add m] with (add m n;o).
				
			(* LHS = RHS *)
			we know [def 2] : add m (add n o) = add (add m n) o               : nat
				because [IH] with (n;o).
				
			we know [step E1] : suc (add m (add n o)) = suc (add (add m n) o)  : nat
				because equality on ([def 2]).

			we know [step E2] : add (suc m) (add n o) = add (add (suc m) n) o  : nat
				because equality on ([step E1];[step L1];[step R1];[step R2]).
			
		by [step E2]	

    QED.

(*
Definitions:
    [add 0] : forall n : nat . add zero n = n : nat;
    [add m] : forall m : nat . forall n : nat . add (suc m) n = suc(add m n) : na
*)
(*
I've proved:
	suc (add m (add n o)) = suc (add (add m n) o)
Need to prove:
	add (suc m) (add n o) = add (add (suc m) n) o
	{LHS of [step L1]}	{LHS of [step R1]}
	suc (add m (add n o)) = add (suc (add m n)) o
*)
